
traffic light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006c  00800060  000007f4  00000888  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008000cc  008000cc  000008f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000924  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000960  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a8b  00000000  00000000  00000aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e4  00000000  00000000  00002533  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d88  00000000  00000000  00002e17  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000220  00000000  00000000  00003ba0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005aa  00000000  00000000  00003dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b49  00000000  00000000  0000436a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00004eb3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ef       	ldi	r30, 0xF4	; 244
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 3c       	cpi	r26, 0xCC	; 204
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac ec       	ldi	r26, 0xCC	; 204
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 3c       	cpi	r26, 0xCD	; 205
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ef 00 	call	0x1de	; 0x1de <main>
  8a:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <send_falling_edge>:


static void send_falling_edge(void)
{
	/* to enable printing the sent character to LCD ,we should send send falling edge to the lcd*/ 
	DIO_write(LCD_CONTROL_PORT,LCD_EN_PIN,1); // set enable pin to one
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	82 e4       	ldi	r24, 0x42	; 66
  98:	0e 94 65 03 	call	0x6ca	; 0x6ca <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	8f e9       	ldi	r24, 0x9F	; 159
  9e:	9f e0       	ldi	r25, 0x0F	; 15
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <send_falling_edge+0xe>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <send_falling_edge+0x14>
  a6:	00 00       	nop
	_delay_ms(2); //period of high
	DIO_write(LCD_CONTROL_PORT,LCD_EN_PIN,0); // clear enable pin 
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	82 e4       	ldi	r24, 0x42	; 66
  ae:	0e 94 65 03 	call	0x6ca	; 0x6ca <DIO_write>
  b2:	8f e9       	ldi	r24, 0x9F	; 159
  b4:	9f e0       	ldi	r25, 0x0F	; 15
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <send_falling_edge+0x24>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <send_falling_edge+0x2a>
  bc:	00 00       	nop
  be:	08 95       	ret

000000c0 <LCD_vSend_cmd>:
	_delay_ms(2); // period of low
}
void LCD_vSend_cmd(uint8 cmd)
{
	#if defined eight_bits_mode //depend on pre-defined configurations which exist in lcd_config.h
	DIO_write_port(LCD_PORT,cmd); //send the command to LCD
  c0:	68 2f       	mov	r22, r24
  c2:	81 e4       	ldi	r24, 0x41	; 65
  c4:	0e 94 d5 03 	call	0x7aa	; 0x7aa <DIO_write_port>
	DIO_write(LCD_CONTROL_PORT,LCD_RS_PIN,0); //enable LCD to receive command 
  c8:	40 e0       	ldi	r20, 0x00	; 0
  ca:	61 e0       	ldi	r22, 0x01	; 1
  cc:	82 e4       	ldi	r24, 0x42	; 66
  ce:	0e 94 65 03 	call	0x6ca	; 0x6ca <DIO_write>
	send_falling_edge(); //send falling edge
  d2:	0e 94 49 00 	call	0x92	; 0x92 <send_falling_edge>
  d6:	08 95       	ret

000000d8 <LCD_vInit>:

void LCD_vInit(void)
{
	#if defined eight_bits_mode //depend on pre-defined configurations which exist in lcd_config.h
	/* set LCD pins as output pins in case of 8 bit LCD*/
	DIO_vsetPINDir(LCD_PORT,LCD_FIRST_PIN,1);
  d8:	41 e0       	ldi	r20, 0x01	; 1
  da:	60 e0       	ldi	r22, 0x00	; 0
  dc:	81 e4       	ldi	r24, 0x41	; 65
  de:	0e 94 f5 02 	call	0x5ea	; 0x5ea <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_SECOND_PIN,1);
  e2:	41 e0       	ldi	r20, 0x01	; 1
  e4:	61 e0       	ldi	r22, 0x01	; 1
  e6:	81 e4       	ldi	r24, 0x41	; 65
  e8:	0e 94 f5 02 	call	0x5ea	; 0x5ea <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_THIRD_PIN,1);
  ec:	41 e0       	ldi	r20, 0x01	; 1
  ee:	62 e0       	ldi	r22, 0x02	; 2
  f0:	81 e4       	ldi	r24, 0x41	; 65
  f2:	0e 94 f5 02 	call	0x5ea	; 0x5ea <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_FOURTH_PIN,1);
  f6:	41 e0       	ldi	r20, 0x01	; 1
  f8:	63 e0       	ldi	r22, 0x03	; 3
  fa:	81 e4       	ldi	r24, 0x41	; 65
  fc:	0e 94 f5 02 	call	0x5ea	; 0x5ea <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_FIFTH_PIN,1);
 100:	41 e0       	ldi	r20, 0x01	; 1
 102:	64 e0       	ldi	r22, 0x04	; 4
 104:	81 e4       	ldi	r24, 0x41	; 65
 106:	0e 94 f5 02 	call	0x5ea	; 0x5ea <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_SIXTH_PIN,1);
 10a:	41 e0       	ldi	r20, 0x01	; 1
 10c:	65 e0       	ldi	r22, 0x05	; 5
 10e:	81 e4       	ldi	r24, 0x41	; 65
 110:	0e 94 f5 02 	call	0x5ea	; 0x5ea <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_SEVENTH_PIN,1);
 114:	41 e0       	ldi	r20, 0x01	; 1
 116:	66 e0       	ldi	r22, 0x06	; 6
 118:	81 e4       	ldi	r24, 0x41	; 65
 11a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_EIGHTH_PIN,1);
 11e:	41 e0       	ldi	r20, 0x01	; 1
 120:	67 e0       	ldi	r22, 0x07	; 7
 122:	81 e4       	ldi	r24, 0x41	; 65
 124:	0e 94 f5 02 	call	0x5ea	; 0x5ea <DIO_vsetPINDir>
	/*****************************/
	/* set LCD control pins as output pins in case of 8 bit LCD */
	DIO_vsetPINDir(LCD_CONTROL_PORT,LCD_EN_PIN,1);
 128:	41 e0       	ldi	r20, 0x01	; 1
 12a:	60 e0       	ldi	r22, 0x00	; 0
 12c:	82 e4       	ldi	r24, 0x42	; 66
 12e:	0e 94 f5 02 	call	0x5ea	; 0x5ea <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_CONTROL_PORT,LCD_RW_PIN,1);
 132:	41 e0       	ldi	r20, 0x01	; 1
 134:	62 e0       	ldi	r22, 0x02	; 2
 136:	82 e4       	ldi	r24, 0x42	; 66
 138:	0e 94 f5 02 	call	0x5ea	; 0x5ea <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_CONTROL_PORT,LCD_RS_PIN,1);
 13c:	41 e0       	ldi	r20, 0x01	; 1
 13e:	61 e0       	ldi	r22, 0x01	; 1
 140:	82 e4       	ldi	r24, 0x42	; 66
 142:	0e 94 f5 02 	call	0x5ea	; 0x5ea <DIO_vsetPINDir>
	/*****************************/
	DIO_write(LCD_CONTROL_PORT,LCD_RW_PIN,0); // enable write to LCD 
 146:	40 e0       	ldi	r20, 0x00	; 0
 148:	62 e0       	ldi	r22, 0x02	; 2
 14a:	82 e4       	ldi	r24, 0x42	; 66
 14c:	0e 94 65 03 	call	0x6ca	; 0x6ca <DIO_write>
	LCD_vSend_cmd(EIGHT_BIT_MODE); //enable 8 bit LCD Mode 
 150:	88 e3       	ldi	r24, 0x38	; 56
 152:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_vSend_cmd>
	LCD_vSend_cmd(CLR_SCREEN); // CLR LCD screen 
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_vSend_cmd>
	LCD_vSend_cmd(DISPLAY_ON_CURSOR_ON); // enable cursor and display on 
 15c:	8e e0       	ldi	r24, 0x0E	; 14
 15e:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_vSend_cmd>
 162:	8f e1       	ldi	r24, 0x1F	; 31
 164:	9e e4       	ldi	r25, 0x4E	; 78
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <LCD_vInit+0x8e>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <LCD_vInit+0x94>
 16c:	00 00       	nop
 16e:	08 95       	ret

00000170 <LCD_vSend_char>:
	
}
void LCD_vSend_char(uint8 data)
{
	#if defined eight_bits_mode //depend on pre-defined configurations which exist in lcd_config.h
	DIO_write_port(LCD_PORT,data); //send the data to LCD
 170:	68 2f       	mov	r22, r24
 172:	81 e4       	ldi	r24, 0x41	; 65
 174:	0e 94 d5 03 	call	0x7aa	; 0x7aa <DIO_write_port>
	DIO_write(LCD_CONTROL_PORT,LCD_RS_PIN,1); //enable LCD to receive data
 178:	41 e0       	ldi	r20, 0x01	; 1
 17a:	61 e0       	ldi	r22, 0x01	; 1
 17c:	82 e4       	ldi	r24, 0x42	; 66
 17e:	0e 94 65 03 	call	0x6ca	; 0x6ca <DIO_write>
	send_falling_edge(); //send falling edge
 182:	0e 94 49 00 	call	0x92	; 0x92 <send_falling_edge>
 186:	08 95       	ret

00000188 <LCD_vSend_string>:
	/******************************************/
	#endif
}

void LCD_vSend_string(char *data)
{
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	ec 01       	movw	r28, r24
	while((*data)!=0) //keep in the loop until the end of the string 
 18e:	03 c0       	rjmp	.+6      	; 0x196 <LCD_vSend_string+0xe>
	{
		LCD_vSend_char(*data); // print the characters of the string 
 190:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_vSend_char>
		data++; // make the pointer points to the next character
 194:	21 96       	adiw	r28, 0x01	; 1
	#endif
}

void LCD_vSend_string(char *data)
{
	while((*data)!=0) //keep in the loop until the end of the string 
 196:	88 81       	ld	r24, Y
 198:	81 11       	cpse	r24, r1
 19a:	fa cf       	rjmp	.-12     	; 0x190 <LCD_vSend_string+0x8>
	{
		LCD_vSend_char(*data); // print the characters of the string 
		data++; // make the pointer points to the next character
	}
}
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <LCD_clearscreen>:

void LCD_clearscreen(void)
{
	LCD_vSend_cmd(CLR_SCREEN); // clear the screen
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_vSend_cmd>
 1a8:	08 95       	ret

000001aa <LCD_movecursor>:
	{
		data=0x80;
	}
	/********************************************/
	/*set the postion of cursor depend on the selected row and coloumn*/
	if(row==1)
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	19 f4       	brne	.+6      	; 0x1b4 <LCD_movecursor+0xa>
	{
		data=0x80+coloumn-1 ;
 1ae:	8f e7       	ldi	r24, 0x7F	; 127
 1b0:	86 0f       	add	r24, r22
 1b2:	06 c0       	rjmp	.+12     	; 0x1c0 <LCD_movecursor+0x16>
	}
	else if (row==2)
 1b4:	82 30       	cpi	r24, 0x02	; 2
 1b6:	19 f4       	brne	.+6      	; 0x1be <LCD_movecursor+0x14>
	{
		data=0xc0+coloumn-1;
 1b8:	8f eb       	ldi	r24, 0xBF	; 191
 1ba:	86 0f       	add	r24, r22
 1bc:	01 c0       	rjmp	.+2      	; 0x1c0 <LCD_movecursor+0x16>
 1be:	80 e8       	ldi	r24, 0x80	; 128
	}
	/**************************************/
	
	LCD_vSend_cmd(data); //set the position  of the cursor
 1c0:	0e 94 60 00 	call	0xc0	; 0xc0 <LCD_vSend_cmd>
 1c4:	08 95       	ret

000001c6 <LED_vInit>:

#include "LED.h"
void LED_vInit(uint8 portname,uint8 pinnumber)
{
	DIO_vsetPINDir(portname,pinnumber,1);//Set the given pin in the given port as an output
 1c6:	41 e0       	ldi	r20, 0x01	; 1
 1c8:	0e 94 f5 02 	call	0x5ea	; 0x5ea <DIO_vsetPINDir>
 1cc:	08 95       	ret

000001ce <LED_vTurnOn>:
}
void LED_vTurnOn(uint8 portname,uint8 pinnumber)
{
	DIO_write(portname,pinnumber,1);//Set the given pin in the given port to one(on)
 1ce:	41 e0       	ldi	r20, 0x01	; 1
 1d0:	0e 94 65 03 	call	0x6ca	; 0x6ca <DIO_write>
 1d4:	08 95       	ret

000001d6 <LED_vTurnOff>:
}
void LED_vTurnOff(uint8 portname,uint8 pinnumber)
{
	DIO_write(portname,pinnumber,0);//Set the given pin in the given port to zero(off)
 1d6:	40 e0       	ldi	r20, 0x00	; 0
 1d8:	0e 94 65 03 	call	0x6ca	; 0x6ca <DIO_write>
 1dc:	08 95       	ret

000001de <main>:
uint8 counter3=5;
uint8 counter4=5;

int main(void)
{
    LED_vInit(LED_PORT_1,LED_ZERO_PIN);
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	84 e4       	ldi	r24, 0x44	; 68
 1e2:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LED_vInit>
	LED_vInit(LED_PORT_1,LED_FIRST_PIN);
 1e6:	61 e0       	ldi	r22, 0x01	; 1
 1e8:	84 e4       	ldi	r24, 0x44	; 68
 1ea:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LED_vInit>
	LED_vInit(LED_PORT_1,LED_SECOND_PIN);
 1ee:	62 e0       	ldi	r22, 0x02	; 2
 1f0:	84 e4       	ldi	r24, 0x44	; 68
 1f2:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LED_vInit>
	LED_vInit(LED_PORT_1,LED_THIRD_PIN);
 1f6:	63 e0       	ldi	r22, 0x03	; 3
 1f8:	84 e4       	ldi	r24, 0x44	; 68
 1fa:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LED_vInit>
	LED_vInit(LED_PORT_1,LED_FOURTH_PIN);
 1fe:	64 e0       	ldi	r22, 0x04	; 4
 200:	84 e4       	ldi	r24, 0x44	; 68
 202:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LED_vInit>
	LED_vInit(LED_PORT_1,LED_FIFTH_PIN);
 206:	65 e0       	ldi	r22, 0x05	; 5
 208:	84 e4       	ldi	r24, 0x44	; 68
 20a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LED_vInit>
	 LED_vInit(LED_PORT_2,LED_ZERO_PIN);
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	83 e4       	ldi	r24, 0x43	; 67
 212:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LED_vInit>
	 LED_vInit(LED_PORT_2,LED_FIRST_PIN);
 216:	61 e0       	ldi	r22, 0x01	; 1
 218:	83 e4       	ldi	r24, 0x43	; 67
 21a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LED_vInit>
	 LED_vInit(LED_PORT_2,LED_SECOND_PIN);
 21e:	62 e0       	ldi	r22, 0x02	; 2
 220:	83 e4       	ldi	r24, 0x43	; 67
 222:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LED_vInit>
	 LED_vInit(LED_PORT_2,LED_THIRD_PIN);
 226:	63 e0       	ldi	r22, 0x03	; 3
 228:	83 e4       	ldi	r24, 0x43	; 67
 22a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LED_vInit>
	 LED_vInit(LED_PORT_2,LED_FOURTH_PIN);
 22e:	64 e0       	ldi	r22, 0x04	; 4
 230:	83 e4       	ldi	r24, 0x43	; 67
 232:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LED_vInit>
	 LED_vInit(LED_PORT_2,LED_FIFTH_PIN);
 236:	65 e0       	ldi	r22, 0x05	; 5
 238:	83 e4       	ldi	r24, 0x43	; 67
 23a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LED_vInit>
	LCD_vInit();
 23e:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_vInit>
	timer_CTC_init_interrupt();
 242:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <timer_CTC_init_interrupt>
	
    while (1) 
    {
		 counter1=5;
 246:	85 e0       	ldi	r24, 0x05	; 5
 248:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <counter1>
		 counter2=5;
 24c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <counter2>
		 counter3=5;
 250:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <counter3>
		 counter4=5;
 254:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		 LCD_clearscreen();
 258:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <LCD_clearscreen>
		 LCD_vSend_string("CARS ON WEST PATH");
 25c:	84 e6       	ldi	r24, 0x64	; 100
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_vSend_string>
		 LCD_movecursor(2,1);
 264:	61 e0       	ldi	r22, 0x01	; 1
 266:	82 e0       	ldi	r24, 0x02	; 2
 268:	0e 94 d5 00 	call	0x1aa	; 0x1aa <LCD_movecursor>
		 LCD_vSend_string("COULD MOVE NOW");
 26c:	86 e7       	ldi	r24, 0x76	; 118
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_vSend_string>
 274:	2f ef       	ldi	r18, 0xFF	; 255
 276:	80 e7       	ldi	r24, 0x70	; 112
 278:	92 e0       	ldi	r25, 0x02	; 2
 27a:	21 50       	subi	r18, 0x01	; 1
 27c:	80 40       	sbci	r24, 0x00	; 0
 27e:	90 40       	sbci	r25, 0x00	; 0
 280:	e1 f7       	brne	.-8      	; 0x27a <main+0x9c>
 282:	00 c0       	rjmp	.+0      	; 0x284 <main+0xa6>
 284:	00 00       	nop
		 _delay_ms(100);
		 LCD_clearscreen();
 286:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <LCD_clearscreen>
		 LCD_vSend_string("remaining 5 sec");
 28a:	85 e8       	ldi	r24, 0x85	; 133
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_vSend_string>
		 LED_vTurnOn(LED_PORT_1,LED_ZERO_PIN); //pin 0 green trrafic light 1
 292:	60 e0       	ldi	r22, 0x00	; 0
 294:	84 e4       	ldi	r24, 0x44	; 68
 296:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LED_vTurnOn>
		 LED_vTurnOn(LED_PORT_1,LED_FOURTH_PIN);//pin 4 yellow traffic light 2
 29a:	64 e0       	ldi	r22, 0x04	; 4
 29c:	84 e4       	ldi	r24, 0x44	; 68
 29e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LED_vTurnOn>
		 LED_vTurnOn(LED_PORT_2,LED_SECOND_PIN);//pin 2 red traffic light 3
 2a2:	62 e0       	ldi	r22, 0x02	; 2
 2a4:	83 e4       	ldi	r24, 0x43	; 67
 2a6:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LED_vTurnOn>
		 LED_vTurnOn(LED_PORT_2,LED_FIFTH_PIN);//pin 5 red traffic light 4
 2aa:	65 e0       	ldi	r22, 0x05	; 5
 2ac:	83 e4       	ldi	r24, 0x43	; 67
 2ae:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LED_vTurnOn>
	
		 while(counter1>0)
 2b2:	22 c0       	rjmp	.+68     	; 0x2f8 <main+0x11a>
		 {
			 if (counter>=10)
 2b4:	90 91 cc 00 	lds	r25, 0x00CC	; 0x8000cc <__data_end>
 2b8:	9a 30       	cpi	r25, 0x0A	; 10
 2ba:	f0 f0       	brcs	.+60     	; 0x2f8 <main+0x11a>
			 {
				 counter =0;
 2bc:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <__data_end>
				 counter1--;
 2c0:	81 50       	subi	r24, 0x01	; 1
 2c2:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <counter1>
				 LCD_movecursor(1,10);
 2c6:	6a e0       	ldi	r22, 0x0A	; 10
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	0e 94 d5 00 	call	0x1aa	; 0x1aa <LCD_movecursor>
				 LCD_vSend_char(' ');
 2ce:	80 e2       	ldi	r24, 0x20	; 32
 2d0:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_vSend_char>
				 LCD_vSend_char((counter1%10)+48);
 2d4:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <counter1>
 2d8:	9d ec       	ldi	r25, 0xCD	; 205
 2da:	89 9f       	mul	r24, r25
 2dc:	91 2d       	mov	r25, r1
 2de:	11 24       	eor	r1, r1
 2e0:	96 95       	lsr	r25
 2e2:	96 95       	lsr	r25
 2e4:	96 95       	lsr	r25
 2e6:	99 0f       	add	r25, r25
 2e8:	29 2f       	mov	r18, r25
 2ea:	22 0f       	add	r18, r18
 2ec:	22 0f       	add	r18, r18
 2ee:	92 0f       	add	r25, r18
 2f0:	89 1b       	sub	r24, r25
 2f2:	80 5d       	subi	r24, 0xD0	; 208
 2f4:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_vSend_char>
		 LED_vTurnOn(LED_PORT_1,LED_ZERO_PIN); //pin 0 green trrafic light 1
		 LED_vTurnOn(LED_PORT_1,LED_FOURTH_PIN);//pin 4 yellow traffic light 2
		 LED_vTurnOn(LED_PORT_2,LED_SECOND_PIN);//pin 2 red traffic light 3
		 LED_vTurnOn(LED_PORT_2,LED_FIFTH_PIN);//pin 5 red traffic light 4
	
		 while(counter1>0)
 2f8:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <counter1>
 2fc:	81 11       	cpse	r24, r1
 2fe:	da cf       	rjmp	.-76     	; 0x2b4 <main+0xd6>
 300:	2f ef       	ldi	r18, 0xFF	; 255
 302:	80 e7       	ldi	r24, 0x70	; 112
 304:	92 e0       	ldi	r25, 0x02	; 2
 306:	21 50       	subi	r18, 0x01	; 1
 308:	80 40       	sbci	r24, 0x00	; 0
 30a:	90 40       	sbci	r25, 0x00	; 0
 30c:	e1 f7       	brne	.-8      	; 0x306 <main+0x128>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <main+0x132>
 310:	00 00       	nop
				 LCD_vSend_char((counter1%10)+48);
			 }
		 }
		 _delay_ms(100);
		 
		 LED_vTurnOn(LED_PORT_1,LED_SECOND_PIN); //pin 2
 312:	62 e0       	ldi	r22, 0x02	; 2
 314:	84 e4       	ldi	r24, 0x44	; 68
 316:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LED_vTurnOn>
		 LED_vTurnOn(LED_PORT_1,LED_THIRD_PIN); //pin 3
 31a:	63 e0       	ldi	r22, 0x03	; 3
 31c:	84 e4       	ldi	r24, 0x44	; 68
 31e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LED_vTurnOn>
		 LED_vTurnOn(LED_PORT_2,LED_FIRST_PIN);//pin 2 red traffic light 3
 322:	61 e0       	ldi	r22, 0x01	; 1
 324:	83 e4       	ldi	r24, 0x43	; 67
 326:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LED_vTurnOn>
		 LED_vTurnOn(LED_PORT_2,LED_FIFTH_PIN);//pin 5 red traffic light 4
 32a:	65 e0       	ldi	r22, 0x05	; 5
 32c:	83 e4       	ldi	r24, 0x43	; 67
 32e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LED_vTurnOn>
		 LED_vTurnOff(LED_PORT_1,LED_ZERO_PIN); //pin 0 green trrafic light 1
 332:	60 e0       	ldi	r22, 0x00	; 0
 334:	84 e4       	ldi	r24, 0x44	; 68
 336:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LED_vTurnOff>
		 LED_vTurnOff(LED_PORT_1,LED_FOURTH_PIN);//pin 4 yellow traffic light 2
 33a:	64 e0       	ldi	r22, 0x04	; 4
 33c:	84 e4       	ldi	r24, 0x44	; 68
 33e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LED_vTurnOff>
		 LED_vTurnOff(LED_PORT_2,LED_SECOND_PIN);//pin 2 red traffic light 3
 342:	62 e0       	ldi	r22, 0x02	; 2
 344:	83 e4       	ldi	r24, 0x43	; 67
 346:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LED_vTurnOff>
		 LCD_clearscreen();
 34a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <LCD_clearscreen>
		 LCD_vSend_string("CARS ON NORTH PATH");
 34e:	85 e9       	ldi	r24, 0x95	; 149
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_vSend_string>
		 LCD_movecursor(2,1);
 356:	61 e0       	ldi	r22, 0x01	; 1
 358:	82 e0       	ldi	r24, 0x02	; 2
 35a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <LCD_movecursor>
		 LCD_vSend_string("COULD MOVE NOW");
 35e:	86 e7       	ldi	r24, 0x76	; 118
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_vSend_string>
 366:	2f ef       	ldi	r18, 0xFF	; 255
 368:	80 e7       	ldi	r24, 0x70	; 112
 36a:	92 e0       	ldi	r25, 0x02	; 2
 36c:	21 50       	subi	r18, 0x01	; 1
 36e:	80 40       	sbci	r24, 0x00	; 0
 370:	90 40       	sbci	r25, 0x00	; 0
 372:	e1 f7       	brne	.-8      	; 0x36c <main+0x18e>
 374:	00 c0       	rjmp	.+0      	; 0x376 <main+0x198>
 376:	00 00       	nop
		 _delay_ms(100);
		 LCD_clearscreen();
 378:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <LCD_clearscreen>
		 LCD_vSend_string("remaining 5 sec");
 37c:	85 e8       	ldi	r24, 0x85	; 133
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_vSend_string>
		
		while(counter2>0)
 384:	22 c0       	rjmp	.+68     	; 0x3ca <main+0x1ec>
		{
			if (counter>=10)
 386:	90 91 cc 00 	lds	r25, 0x00CC	; 0x8000cc <__data_end>
 38a:	9a 30       	cpi	r25, 0x0A	; 10
 38c:	f0 f0       	brcs	.+60     	; 0x3ca <main+0x1ec>
			{
				counter =0;
 38e:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <__data_end>
				counter2--;
 392:	81 50       	subi	r24, 0x01	; 1
 394:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <counter2>
				LCD_movecursor(1,10);
 398:	6a e0       	ldi	r22, 0x0A	; 10
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <LCD_movecursor>
				LCD_vSend_char(' ');
 3a0:	80 e2       	ldi	r24, 0x20	; 32
 3a2:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_vSend_char>
				LCD_vSend_char((counter2%10)+48);
 3a6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <counter2>
 3aa:	9d ec       	ldi	r25, 0xCD	; 205
 3ac:	89 9f       	mul	r24, r25
 3ae:	91 2d       	mov	r25, r1
 3b0:	11 24       	eor	r1, r1
 3b2:	96 95       	lsr	r25
 3b4:	96 95       	lsr	r25
 3b6:	96 95       	lsr	r25
 3b8:	99 0f       	add	r25, r25
 3ba:	29 2f       	mov	r18, r25
 3bc:	22 0f       	add	r18, r18
 3be:	22 0f       	add	r18, r18
 3c0:	92 0f       	add	r25, r18
 3c2:	89 1b       	sub	r24, r25
 3c4:	80 5d       	subi	r24, 0xD0	; 208
 3c6:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_vSend_char>
		 LCD_vSend_string("COULD MOVE NOW");
		 _delay_ms(100);
		 LCD_clearscreen();
		 LCD_vSend_string("remaining 5 sec");
		
		while(counter2>0)
 3ca:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <counter2>
 3ce:	81 11       	cpse	r24, r1
 3d0:	da cf       	rjmp	.-76     	; 0x386 <main+0x1a8>
 3d2:	2f ef       	ldi	r18, 0xFF	; 255
 3d4:	80 e7       	ldi	r24, 0x70	; 112
 3d6:	92 e0       	ldi	r25, 0x02	; 2
 3d8:	21 50       	subi	r18, 0x01	; 1
 3da:	80 40       	sbci	r24, 0x00	; 0
 3dc:	90 40       	sbci	r25, 0x00	; 0
 3de:	e1 f7       	brne	.-8      	; 0x3d8 <main+0x1fa>
 3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <main+0x204>
 3e2:	00 00       	nop
				LCD_vSend_char(' ');
				LCD_vSend_char((counter2%10)+48);
			}
		}
		_delay_ms(100);
		LED_vTurnOn(LED_PORT_1,LED_SECOND_PIN); //pin 2
 3e4:	62 e0       	ldi	r22, 0x02	; 2
 3e6:	84 e4       	ldi	r24, 0x44	; 68
 3e8:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LED_vTurnOn>
		LED_vTurnOn(LED_PORT_1,LED_FIFTH_PIN);  //pin 5
 3ec:	65 e0       	ldi	r22, 0x05	; 5
 3ee:	84 e4       	ldi	r24, 0x44	; 68
 3f0:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LED_vTurnOn>
		LED_vTurnOn(LED_PORT_2,LED_ZERO_PIN); //pin 0
 3f4:	60 e0       	ldi	r22, 0x00	; 0
 3f6:	83 e4       	ldi	r24, 0x43	; 67
 3f8:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LED_vTurnOn>
		LED_vTurnOn(LED_PORT_2,LED_FOURTH_PIN);  //pin 4
 3fc:	64 e0       	ldi	r22, 0x04	; 4
 3fe:	83 e4       	ldi	r24, 0x43	; 67
 400:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LED_vTurnOn>
		LED_vTurnOff(LED_PORT_1,LED_FOURTH_PIN); //pin 1
 404:	64 e0       	ldi	r22, 0x04	; 4
 406:	84 e4       	ldi	r24, 0x44	; 68
 408:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LED_vTurnOff>
		LED_vTurnOff(LED_PORT_2,LED_FIRST_PIN); //pin 4
 40c:	61 e0       	ldi	r22, 0x01	; 1
 40e:	83 e4       	ldi	r24, 0x43	; 67
 410:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LED_vTurnOff>
		LED_vTurnOff(LED_PORT_1,LED_THIRD_PIN);
 414:	63 e0       	ldi	r22, 0x03	; 3
 416:	84 e4       	ldi	r24, 0x44	; 68
 418:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LED_vTurnOff>
		LED_vTurnOff(LED_PORT_2,LED_FIFTH_PIN);
 41c:	65 e0       	ldi	r22, 0x05	; 5
 41e:	83 e4       	ldi	r24, 0x43	; 67
 420:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LED_vTurnOff>
		LCD_clearscreen();
 424:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <LCD_clearscreen>
		LCD_vSend_string("CAR ON EAST PATH ");
 428:	88 ea       	ldi	r24, 0xA8	; 168
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_vSend_string>
		LCD_movecursor(2,1);
 430:	61 e0       	ldi	r22, 0x01	; 1
 432:	82 e0       	ldi	r24, 0x02	; 2
 434:	0e 94 d5 00 	call	0x1aa	; 0x1aa <LCD_movecursor>
		LCD_vSend_string("COULD MOVE NOW");
 438:	86 e7       	ldi	r24, 0x76	; 118
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_vSend_string>
 440:	2f ef       	ldi	r18, 0xFF	; 255
 442:	80 e7       	ldi	r24, 0x70	; 112
 444:	92 e0       	ldi	r25, 0x02	; 2
 446:	21 50       	subi	r18, 0x01	; 1
 448:	80 40       	sbci	r24, 0x00	; 0
 44a:	90 40       	sbci	r25, 0x00	; 0
 44c:	e1 f7       	brne	.-8      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 44e:	00 c0       	rjmp	.+0      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 450:	00 00       	nop
		_delay_ms(100);
		LCD_clearscreen();
 452:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <LCD_clearscreen>
		LCD_vSend_string("remaining 5 sec");
 456:	85 e8       	ldi	r24, 0x85	; 133
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_vSend_string>
		
		while(counter3>0)
 45e:	22 c0       	rjmp	.+68     	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
		{
			if (counter>=10)
 460:	90 91 cc 00 	lds	r25, 0x00CC	; 0x8000cc <__data_end>
 464:	9a 30       	cpi	r25, 0x0A	; 10
 466:	f0 f0       	brcs	.+60     	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
			{
				counter =0;
 468:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <__data_end>
				counter3--;
 46c:	81 50       	subi	r24, 0x01	; 1
 46e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <counter3>
				LCD_movecursor(1,10);
 472:	6a e0       	ldi	r22, 0x0A	; 10
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	0e 94 d5 00 	call	0x1aa	; 0x1aa <LCD_movecursor>
				LCD_vSend_char(' ');
 47a:	80 e2       	ldi	r24, 0x20	; 32
 47c:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_vSend_char>
				LCD_vSend_char((counter3%10)+48);
 480:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <counter3>
 484:	9d ec       	ldi	r25, 0xCD	; 205
 486:	89 9f       	mul	r24, r25
 488:	91 2d       	mov	r25, r1
 48a:	11 24       	eor	r1, r1
 48c:	96 95       	lsr	r25
 48e:	96 95       	lsr	r25
 490:	96 95       	lsr	r25
 492:	99 0f       	add	r25, r25
 494:	29 2f       	mov	r18, r25
 496:	22 0f       	add	r18, r18
 498:	22 0f       	add	r18, r18
 49a:	92 0f       	add	r25, r18
 49c:	89 1b       	sub	r24, r25
 49e:	80 5d       	subi	r24, 0xD0	; 208
 4a0:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_vSend_char>
		LCD_vSend_string("COULD MOVE NOW");
		_delay_ms(100);
		LCD_clearscreen();
		LCD_vSend_string("remaining 5 sec");
		
		while(counter3>0)
 4a4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <counter3>
 4a8:	81 11       	cpse	r24, r1
 4aa:	da cf       	rjmp	.-76     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 4ac:	2f ef       	ldi	r18, 0xFF	; 255
 4ae:	80 e7       	ldi	r24, 0x70	; 112
 4b0:	92 e0       	ldi	r25, 0x02	; 2
 4b2:	21 50       	subi	r18, 0x01	; 1
 4b4:	80 40       	sbci	r24, 0x00	; 0
 4b6:	90 40       	sbci	r25, 0x00	; 0
 4b8:	e1 f7       	brne	.-8      	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
 4ba:	00 c0       	rjmp	.+0      	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
 4bc:	00 00       	nop
				LCD_vSend_char((counter3%10)+48);
			}
			
		}
		_delay_ms(100);
		LED_vTurnOn(LED_PORT_1,LED_FIRST_PIN);
 4be:	61 e0       	ldi	r22, 0x01	; 1
 4c0:	84 e4       	ldi	r24, 0x44	; 68
 4c2:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LED_vTurnOn>
		LED_vTurnOn(LED_PORT_2,LED_SECOND_PIN);
 4c6:	62 e0       	ldi	r22, 0x02	; 2
 4c8:	83 e4       	ldi	r24, 0x43	; 67
 4ca:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LED_vTurnOn>
		LED_vTurnOn(LED_PORT_2,LED_THIRD_PIN);
 4ce:	63 e0       	ldi	r22, 0x03	; 3
 4d0:	83 e4       	ldi	r24, 0x43	; 67
 4d2:	0e 94 e7 00 	call	0x1ce	; 0x1ce <LED_vTurnOn>
		LED_vTurnOff(LED_PORT_1,LED_SECOND_PIN);
 4d6:	62 e0       	ldi	r22, 0x02	; 2
 4d8:	84 e4       	ldi	r24, 0x44	; 68
 4da:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LED_vTurnOff>
		LED_vTurnOff(LED_PORT_1,LED_ZERO_PIN);
 4de:	60 e0       	ldi	r22, 0x00	; 0
 4e0:	84 e4       	ldi	r24, 0x44	; 68
 4e2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LED_vTurnOff>
		LED_vTurnOff(LED_PORT_1,LED_FOURTH_PIN); //pin 1
 4e6:	64 e0       	ldi	r22, 0x04	; 4
 4e8:	84 e4       	ldi	r24, 0x44	; 68
 4ea:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LED_vTurnOff>
		LED_vTurnOff(LED_PORT_2,LED_ZERO_PIN);
 4ee:	60 e0       	ldi	r22, 0x00	; 0
 4f0:	83 e4       	ldi	r24, 0x43	; 67
 4f2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LED_vTurnOff>
		LED_vTurnOff(LED_PORT_2,LED_FOURTH_PIN);  //pin 5
 4f6:	64 e0       	ldi	r22, 0x04	; 4
 4f8:	83 e4       	ldi	r24, 0x43	; 67
 4fa:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LED_vTurnOff>
		LCD_clearscreen();
 4fe:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <LCD_clearscreen>
		LCD_vSend_string("CAR ON SOUTH PATH");
 502:	8a eb       	ldi	r24, 0xBA	; 186
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_vSend_string>
		LCD_movecursor(2,1);
 50a:	61 e0       	ldi	r22, 0x01	; 1
 50c:	82 e0       	ldi	r24, 0x02	; 2
 50e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <LCD_movecursor>
		LCD_vSend_string("COULD MOVE NOW");
 512:	86 e7       	ldi	r24, 0x76	; 118
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_vSend_string>
 51a:	2f ef       	ldi	r18, 0xFF	; 255
 51c:	80 e7       	ldi	r24, 0x70	; 112
 51e:	92 e0       	ldi	r25, 0x02	; 2
 520:	21 50       	subi	r18, 0x01	; 1
 522:	80 40       	sbci	r24, 0x00	; 0
 524:	90 40       	sbci	r25, 0x00	; 0
 526:	e1 f7       	brne	.-8      	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
 528:	00 c0       	rjmp	.+0      	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 52a:	00 00       	nop
		_delay_ms(100);
		LCD_clearscreen();
 52c:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <LCD_clearscreen>
		LCD_vSend_string("remaining 5 sec");
 530:	85 e8       	ldi	r24, 0x85	; 133
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_vSend_string>
		while(counter4>0)
 538:	29 c0       	rjmp	.+82     	; 0x58c <__EEPROM_REGION_LENGTH__+0x18c>
		{
			if (counter>=10)
 53a:	90 91 cc 00 	lds	r25, 0x00CC	; 0x8000cc <__data_end>
 53e:	9a 30       	cpi	r25, 0x0A	; 10
 540:	28 f1       	brcs	.+74     	; 0x58c <__EEPROM_REGION_LENGTH__+0x18c>
			{
				counter4--;
 542:	81 50       	subi	r24, 0x01	; 1
 544:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				LCD_movecursor(1,10);
 548:	6a e0       	ldi	r22, 0x0A	; 10
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <LCD_movecursor>
				LCD_vSend_char(' ');
 550:	80 e2       	ldi	r24, 0x20	; 32
 552:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_vSend_char>
				LCD_vSend_char((counter4%10)+48);
 556:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 55a:	9d ec       	ldi	r25, 0xCD	; 205
 55c:	89 9f       	mul	r24, r25
 55e:	91 2d       	mov	r25, r1
 560:	11 24       	eor	r1, r1
 562:	96 95       	lsr	r25
 564:	96 95       	lsr	r25
 566:	96 95       	lsr	r25
 568:	99 0f       	add	r25, r25
 56a:	29 2f       	mov	r18, r25
 56c:	22 0f       	add	r18, r18
 56e:	22 0f       	add	r18, r18
 570:	92 0f       	add	r25, r18
 572:	89 1b       	sub	r24, r25
 574:	80 5d       	subi	r24, 0xD0	; 208
 576:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_vSend_char>
 57a:	2f ef       	ldi	r18, 0xFF	; 255
 57c:	80 e7       	ldi	r24, 0x70	; 112
 57e:	92 e0       	ldi	r25, 0x02	; 2
 580:	21 50       	subi	r18, 0x01	; 1
 582:	80 40       	sbci	r24, 0x00	; 0
 584:	90 40       	sbci	r25, 0x00	; 0
 586:	e1 f7       	brne	.-8      	; 0x580 <__EEPROM_REGION_LENGTH__+0x180>
 588:	00 c0       	rjmp	.+0      	; 0x58a <__EEPROM_REGION_LENGTH__+0x18a>
 58a:	00 00       	nop
		LCD_movecursor(2,1);
		LCD_vSend_string("COULD MOVE NOW");
		_delay_ms(100);
		LCD_clearscreen();
		LCD_vSend_string("remaining 5 sec");
		while(counter4>0)
 58c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 590:	81 11       	cpse	r24, r1
 592:	d3 cf       	rjmp	.-90     	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
 594:	2f ef       	ldi	r18, 0xFF	; 255
 596:	84 e3       	ldi	r24, 0x34	; 52
 598:	9c e0       	ldi	r25, 0x0C	; 12
 59a:	21 50       	subi	r18, 0x01	; 1
 59c:	80 40       	sbci	r24, 0x00	; 0
 59e:	90 40       	sbci	r25, 0x00	; 0
 5a0:	e1 f7       	brne	.-8      	; 0x59a <__EEPROM_REGION_LENGTH__+0x19a>
 5a2:	00 c0       	rjmp	.+0      	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 5a4:	00 00       	nop
				_delay_ms(100);
			}
		}
		_delay_ms(500);
		
		LED_vTurnOff(LED_PORT_1,LED_FIRST_PIN);
 5a6:	61 e0       	ldi	r22, 0x01	; 1
 5a8:	84 e4       	ldi	r24, 0x44	; 68
 5aa:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LED_vTurnOff>
		LED_vTurnOff(LED_PORT_1,LED_FIFTH_PIN);
 5ae:	65 e0       	ldi	r22, 0x05	; 5
 5b0:	84 e4       	ldi	r24, 0x44	; 68
 5b2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LED_vTurnOff>
		LED_vTurnOff(LED_PORT_2,LED_THIRD_PIN);
 5b6:	63 e0       	ldi	r22, 0x03	; 3
 5b8:	83 e4       	ldi	r24, 0x43	; 67
 5ba:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LED_vTurnOff>
		LED_vTurnOff(LED_PORT_2,LED_FOURTH_PIN);
 5be:	64 e0       	ldi	r22, 0x04	; 4
 5c0:	83 e4       	ldi	r24, 0x43	; 67
 5c2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LED_vTurnOff>
		
    }
 5c6:	3f ce       	rjmp	.-898    	; 0x246 <main+0x68>

000005c8 <__vector_10>:
}

ISR(TIMER0_COMP_vect)
{
 5c8:	1f 92       	push	r1
 5ca:	0f 92       	push	r0
 5cc:	0f b6       	in	r0, 0x3f	; 63
 5ce:	0f 92       	push	r0
 5d0:	11 24       	eor	r1, r1
 5d2:	8f 93       	push	r24
	counter++;
 5d4:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <__data_end>
 5d8:	8f 5f       	subi	r24, 0xFF	; 255
 5da:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__data_end>
}
 5de:	8f 91       	pop	r24
 5e0:	0f 90       	pop	r0
 5e2:	0f be       	out	0x3f, r0	; 63
 5e4:	0f 90       	pop	r0
 5e6:	1f 90       	pop	r1
 5e8:	18 95       	reti

000005ea <DIO_vsetPINDir>:
		break;
		case 'C':
		TOG_BIT(PORTC,pinnumber);//Toggle the value of the given pin in port C
		break;
		case 'D':
		TOG_BIT(PORTD,pinnumber);//Toggle the value of the given pin in port D
 5ea:	82 34       	cpi	r24, 0x42	; 66
 5ec:	19 f1       	breq	.+70     	; 0x634 <DIO_vsetPINDir+0x4a>
 5ee:	18 f4       	brcc	.+6      	; 0x5f6 <DIO_vsetPINDir+0xc>
 5f0:	81 34       	cpi	r24, 0x41	; 65
 5f2:	39 f0       	breq	.+14     	; 0x602 <DIO_vsetPINDir+0x18>
 5f4:	08 95       	ret
 5f6:	83 34       	cpi	r24, 0x43	; 67
 5f8:	b1 f1       	breq	.+108    	; 0x666 <DIO_vsetPINDir+0x7c>
 5fa:	84 34       	cpi	r24, 0x44	; 68
 5fc:	09 f4       	brne	.+2      	; 0x600 <DIO_vsetPINDir+0x16>
 5fe:	4c c0       	rjmp	.+152    	; 0x698 <DIO_vsetPINDir+0xae>
 600:	08 95       	ret
 602:	41 30       	cpi	r20, 0x01	; 1
 604:	59 f4       	brne	.+22     	; 0x61c <DIO_vsetPINDir+0x32>
 606:	2a b3       	in	r18, 0x1a	; 26
 608:	81 e0       	ldi	r24, 0x01	; 1
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	02 c0       	rjmp	.+4      	; 0x612 <DIO_vsetPINDir+0x28>
 60e:	88 0f       	add	r24, r24
 610:	99 1f       	adc	r25, r25
 612:	6a 95       	dec	r22
 614:	e2 f7       	brpl	.-8      	; 0x60e <DIO_vsetPINDir+0x24>
 616:	82 2b       	or	r24, r18
 618:	8a bb       	out	0x1a, r24	; 26
 61a:	08 95       	ret
 61c:	2a b3       	in	r18, 0x1a	; 26
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	02 c0       	rjmp	.+4      	; 0x628 <DIO_vsetPINDir+0x3e>
 624:	88 0f       	add	r24, r24
 626:	99 1f       	adc	r25, r25
 628:	6a 95       	dec	r22
 62a:	e2 f7       	brpl	.-8      	; 0x624 <DIO_vsetPINDir+0x3a>
 62c:	80 95       	com	r24
 62e:	82 23       	and	r24, r18
 630:	8a bb       	out	0x1a, r24	; 26
 632:	08 95       	ret
 634:	41 30       	cpi	r20, 0x01	; 1
 636:	59 f4       	brne	.+22     	; 0x64e <DIO_vsetPINDir+0x64>
 638:	27 b3       	in	r18, 0x17	; 23
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	02 c0       	rjmp	.+4      	; 0x644 <DIO_vsetPINDir+0x5a>
 640:	88 0f       	add	r24, r24
 642:	99 1f       	adc	r25, r25
 644:	6a 95       	dec	r22
 646:	e2 f7       	brpl	.-8      	; 0x640 <DIO_vsetPINDir+0x56>
 648:	82 2b       	or	r24, r18
 64a:	87 bb       	out	0x17, r24	; 23
 64c:	08 95       	ret
 64e:	27 b3       	in	r18, 0x17	; 23
 650:	81 e0       	ldi	r24, 0x01	; 1
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	02 c0       	rjmp	.+4      	; 0x65a <DIO_vsetPINDir+0x70>
 656:	88 0f       	add	r24, r24
 658:	99 1f       	adc	r25, r25
 65a:	6a 95       	dec	r22
 65c:	e2 f7       	brpl	.-8      	; 0x656 <DIO_vsetPINDir+0x6c>
 65e:	80 95       	com	r24
 660:	82 23       	and	r24, r18
 662:	87 bb       	out	0x17, r24	; 23
 664:	08 95       	ret
 666:	41 30       	cpi	r20, 0x01	; 1
 668:	59 f4       	brne	.+22     	; 0x680 <DIO_vsetPINDir+0x96>
 66a:	24 b3       	in	r18, 0x14	; 20
 66c:	81 e0       	ldi	r24, 0x01	; 1
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	02 c0       	rjmp	.+4      	; 0x676 <DIO_vsetPINDir+0x8c>
 672:	88 0f       	add	r24, r24
 674:	99 1f       	adc	r25, r25
 676:	6a 95       	dec	r22
 678:	e2 f7       	brpl	.-8      	; 0x672 <DIO_vsetPINDir+0x88>
 67a:	82 2b       	or	r24, r18
 67c:	84 bb       	out	0x14, r24	; 20
 67e:	08 95       	ret
 680:	24 b3       	in	r18, 0x14	; 20
 682:	81 e0       	ldi	r24, 0x01	; 1
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	02 c0       	rjmp	.+4      	; 0x68c <DIO_vsetPINDir+0xa2>
 688:	88 0f       	add	r24, r24
 68a:	99 1f       	adc	r25, r25
 68c:	6a 95       	dec	r22
 68e:	e2 f7       	brpl	.-8      	; 0x688 <DIO_vsetPINDir+0x9e>
 690:	80 95       	com	r24
 692:	82 23       	and	r24, r18
 694:	84 bb       	out	0x14, r24	; 20
 696:	08 95       	ret
 698:	41 30       	cpi	r20, 0x01	; 1
 69a:	59 f4       	brne	.+22     	; 0x6b2 <DIO_vsetPINDir+0xc8>
 69c:	21 b3       	in	r18, 0x11	; 17
 69e:	81 e0       	ldi	r24, 0x01	; 1
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <DIO_vsetPINDir+0xbe>
 6a4:	88 0f       	add	r24, r24
 6a6:	99 1f       	adc	r25, r25
 6a8:	6a 95       	dec	r22
 6aa:	e2 f7       	brpl	.-8      	; 0x6a4 <DIO_vsetPINDir+0xba>
 6ac:	82 2b       	or	r24, r18
 6ae:	81 bb       	out	0x11, r24	; 17
 6b0:	08 95       	ret
 6b2:	21 b3       	in	r18, 0x11	; 17
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	02 c0       	rjmp	.+4      	; 0x6be <DIO_vsetPINDir+0xd4>
 6ba:	88 0f       	add	r24, r24
 6bc:	99 1f       	adc	r25, r25
 6be:	6a 95       	dec	r22
 6c0:	e2 f7       	brpl	.-8      	; 0x6ba <DIO_vsetPINDir+0xd0>
 6c2:	80 95       	com	r24
 6c4:	82 23       	and	r24, r18
 6c6:	81 bb       	out	0x11, r24	; 17
 6c8:	08 95       	ret

000006ca <DIO_write>:
 6ca:	82 34       	cpi	r24, 0x42	; 66
 6cc:	19 f1       	breq	.+70     	; 0x714 <DIO_write+0x4a>
 6ce:	18 f4       	brcc	.+6      	; 0x6d6 <DIO_write+0xc>
 6d0:	81 34       	cpi	r24, 0x41	; 65
 6d2:	39 f0       	breq	.+14     	; 0x6e2 <DIO_write+0x18>
 6d4:	08 95       	ret
 6d6:	83 34       	cpi	r24, 0x43	; 67
 6d8:	b1 f1       	breq	.+108    	; 0x746 <DIO_write+0x7c>
 6da:	84 34       	cpi	r24, 0x44	; 68
 6dc:	09 f4       	brne	.+2      	; 0x6e0 <DIO_write+0x16>
 6de:	4c c0       	rjmp	.+152    	; 0x778 <DIO_write+0xae>
 6e0:	08 95       	ret
 6e2:	41 30       	cpi	r20, 0x01	; 1
 6e4:	59 f4       	brne	.+22     	; 0x6fc <DIO_write+0x32>
 6e6:	2b b3       	in	r18, 0x1b	; 27
 6e8:	81 e0       	ldi	r24, 0x01	; 1
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <DIO_write+0x28>
 6ee:	88 0f       	add	r24, r24
 6f0:	99 1f       	adc	r25, r25
 6f2:	6a 95       	dec	r22
 6f4:	e2 f7       	brpl	.-8      	; 0x6ee <DIO_write+0x24>
 6f6:	82 2b       	or	r24, r18
 6f8:	8b bb       	out	0x1b, r24	; 27
 6fa:	08 95       	ret
 6fc:	2b b3       	in	r18, 0x1b	; 27
 6fe:	81 e0       	ldi	r24, 0x01	; 1
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	02 c0       	rjmp	.+4      	; 0x708 <DIO_write+0x3e>
 704:	88 0f       	add	r24, r24
 706:	99 1f       	adc	r25, r25
 708:	6a 95       	dec	r22
 70a:	e2 f7       	brpl	.-8      	; 0x704 <DIO_write+0x3a>
 70c:	80 95       	com	r24
 70e:	82 23       	and	r24, r18
 710:	8b bb       	out	0x1b, r24	; 27
 712:	08 95       	ret
 714:	41 30       	cpi	r20, 0x01	; 1
 716:	59 f4       	brne	.+22     	; 0x72e <DIO_write+0x64>
 718:	28 b3       	in	r18, 0x18	; 24
 71a:	81 e0       	ldi	r24, 0x01	; 1
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	02 c0       	rjmp	.+4      	; 0x724 <DIO_write+0x5a>
 720:	88 0f       	add	r24, r24
 722:	99 1f       	adc	r25, r25
 724:	6a 95       	dec	r22
 726:	e2 f7       	brpl	.-8      	; 0x720 <DIO_write+0x56>
 728:	82 2b       	or	r24, r18
 72a:	88 bb       	out	0x18, r24	; 24
 72c:	08 95       	ret
 72e:	28 b3       	in	r18, 0x18	; 24
 730:	81 e0       	ldi	r24, 0x01	; 1
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	02 c0       	rjmp	.+4      	; 0x73a <DIO_write+0x70>
 736:	88 0f       	add	r24, r24
 738:	99 1f       	adc	r25, r25
 73a:	6a 95       	dec	r22
 73c:	e2 f7       	brpl	.-8      	; 0x736 <DIO_write+0x6c>
 73e:	80 95       	com	r24
 740:	82 23       	and	r24, r18
 742:	88 bb       	out	0x18, r24	; 24
 744:	08 95       	ret
 746:	41 30       	cpi	r20, 0x01	; 1
 748:	59 f4       	brne	.+22     	; 0x760 <DIO_write+0x96>
 74a:	25 b3       	in	r18, 0x15	; 21
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	02 c0       	rjmp	.+4      	; 0x756 <DIO_write+0x8c>
 752:	88 0f       	add	r24, r24
 754:	99 1f       	adc	r25, r25
 756:	6a 95       	dec	r22
 758:	e2 f7       	brpl	.-8      	; 0x752 <DIO_write+0x88>
 75a:	82 2b       	or	r24, r18
 75c:	85 bb       	out	0x15, r24	; 21
 75e:	08 95       	ret
 760:	25 b3       	in	r18, 0x15	; 21
 762:	81 e0       	ldi	r24, 0x01	; 1
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	02 c0       	rjmp	.+4      	; 0x76c <DIO_write+0xa2>
 768:	88 0f       	add	r24, r24
 76a:	99 1f       	adc	r25, r25
 76c:	6a 95       	dec	r22
 76e:	e2 f7       	brpl	.-8      	; 0x768 <DIO_write+0x9e>
 770:	80 95       	com	r24
 772:	82 23       	and	r24, r18
 774:	85 bb       	out	0x15, r24	; 21
 776:	08 95       	ret
 778:	41 30       	cpi	r20, 0x01	; 1
 77a:	59 f4       	brne	.+22     	; 0x792 <DIO_write+0xc8>
 77c:	22 b3       	in	r18, 0x12	; 18
 77e:	81 e0       	ldi	r24, 0x01	; 1
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	02 c0       	rjmp	.+4      	; 0x788 <DIO_write+0xbe>
 784:	88 0f       	add	r24, r24
 786:	99 1f       	adc	r25, r25
 788:	6a 95       	dec	r22
 78a:	e2 f7       	brpl	.-8      	; 0x784 <DIO_write+0xba>
 78c:	82 2b       	or	r24, r18
 78e:	82 bb       	out	0x12, r24	; 18
 790:	08 95       	ret
 792:	22 b3       	in	r18, 0x12	; 18
 794:	81 e0       	ldi	r24, 0x01	; 1
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	02 c0       	rjmp	.+4      	; 0x79e <DIO_write+0xd4>
 79a:	88 0f       	add	r24, r24
 79c:	99 1f       	adc	r25, r25
 79e:	6a 95       	dec	r22
 7a0:	e2 f7       	brpl	.-8      	; 0x79a <DIO_write+0xd0>
 7a2:	80 95       	com	r24
 7a4:	82 23       	and	r24, r18
 7a6:	82 bb       	out	0x12, r24	; 18
 7a8:	08 95       	ret

000007aa <DIO_write_port>:
		default: break;
	}
}
void DIO_write_port(uint8 portname,uint8 portvalue)
{
	switch(portname)
 7aa:	82 34       	cpi	r24, 0x42	; 66
 7ac:	59 f0       	breq	.+22     	; 0x7c4 <DIO_write_port+0x1a>
 7ae:	18 f4       	brcc	.+6      	; 0x7b6 <DIO_write_port+0xc>
 7b0:	81 34       	cpi	r24, 0x41	; 65
 7b2:	31 f0       	breq	.+12     	; 0x7c0 <DIO_write_port+0x16>
 7b4:	08 95       	ret
 7b6:	83 34       	cpi	r24, 0x43	; 67
 7b8:	39 f0       	breq	.+14     	; 0x7c8 <DIO_write_port+0x1e>
 7ba:	84 34       	cpi	r24, 0x44	; 68
 7bc:	39 f0       	breq	.+14     	; 0x7cc <DIO_write_port+0x22>
 7be:	08 95       	ret
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
 7c0:	6b bb       	out	0x1b, r22	; 27
		break ;
 7c2:	08 95       	ret
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
 7c4:	68 bb       	out	0x18, r22	; 24
		break ;
 7c6:	08 95       	ret
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
 7c8:	65 bb       	out	0x15, r22	; 21
		break ;
 7ca:	08 95       	ret
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
 7cc:	62 bb       	out	0x12, r22	; 18
 7ce:	08 95       	ret

000007d0 <timer_CTC_init_interrupt>:
#include <avr/io.h>
#include <avr/interrupt.h>
void timer_CTC_init_interrupt(void)
{
	/* select CTC mode*/
	SET_BIT(TCCR0,WGM01);
 7d0:	83 b7       	in	r24, 0x33	; 51
 7d2:	88 60       	ori	r24, 0x08	; 8
 7d4:	83 bf       	out	0x33, r24	; 51
	/* load a value in OCR0 */
	OCR0=78;
 7d6:	8e e4       	ldi	r24, 0x4E	; 78
 7d8:	8c bf       	out	0x3c, r24	; 60
	/* select timer clock */	
	SET_BIT(TCCR0,CS00);
 7da:	83 b7       	in	r24, 0x33	; 51
 7dc:	81 60       	ori	r24, 0x01	; 1
 7de:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
 7e0:	83 b7       	in	r24, 0x33	; 51
 7e2:	84 60       	ori	r24, 0x04	; 4
 7e4:	83 bf       	out	0x33, r24	; 51
	/* enable interrupt*/
	sei();
 7e6:	78 94       	sei
	SET_BIT(TIMSK,OCIE0);
 7e8:	89 b7       	in	r24, 0x39	; 57
 7ea:	82 60       	ori	r24, 0x02	; 2
 7ec:	89 bf       	out	0x39, r24	; 57
 7ee:	08 95       	ret

000007f0 <_exit>:
 7f0:	f8 94       	cli

000007f2 <__stop_program>:
 7f2:	ff cf       	rjmp	.-2      	; 0x7f2 <__stop_program>
